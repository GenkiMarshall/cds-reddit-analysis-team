What are your thoughts on journal publishers restricting access to academic research papers?I think it's terrible, and I'm encouraged that we're moving away from restricted access.  I put all my papers online.Hopefully only after the 6 or 12 month embargo if it's not open access... Even if you don't put the final form of the paper online, you can still run into copyright issues if you immediately post the paper online after it is accepted. 

EDIT: Not sure if CS typically publish a lot in IEEE, but they recently changed their policy regarding posting your work online. You are allowed to post the preprint copy immediately, just not the final published version. 
http://www.ieee.org/publications_standards/publications/rights/paperversionpolicy.htmlI was surprised to see this too. Are you legally allowed to distribute your own copy? I was under the impression that your work became property of the publisher once you agreed to have it printed, but I am guilty of not reading the fine print. Neha:  Hmmm.  Perhaps in our conferences we are just a bit more lax about this.  I'll look into it.You are correct. The ACM (for those who aren't CS people, they are [*the* organization for computer science papers and conferences](http://www.acm.org/)) [explicitly allows it](http://www.acm.org/publications/CopyReleaseProc-4-13.pdf) (although they don't need to because it's implied under their copyright agreement anyway).

As an aside it likely comes from all of those open source values in our community.It depends on the publisher/journal but what I've been told by my adviser, who is also the chief editor of one of the journals in our field, after 6 or 12 months, you can post your final draft of the paper online. This copy cannot be the PDF as it is published in the journal, but it can be whatever draft you submitted to the journal. Of course, I'd imagine this varies for different fields but it is still a good way to provide open access to your research papers if the journals you submit to are not open access. Who were your role models growing up to enter the field you are in now?My mom.  She's a doctor, not a computer scientist, but she was pretty bad-ass:  she moved to the US from India alone in her twenties with no resources besides an MD and a residency job, and eventually brought my dad over and now has a successful pediatric practice.

Edited to say she had like, $7 to her name.  It wasn't really all that 1% ish.

Edited again to add a few folks:

* My dad, who first bought us a computer and who now, in his 60s and with zero CS education, is learning a TON about video editing, P2P, and more.  His growth astounds me.
* Amazing women like [Barbara Liskov](http://www.pmg.csail.mit.edu/barbara_liskov.html), a professor at MIT who is on my thesis committee (!) and also one of the first women in the US to get her PhD in computer science, and a Turing Award winner.
Elena: That's awesome, Neha! :) Similarly, my role model was my dad. He is an engineer (in industry). He's always learning new things, and going to talks at local universities. He used to take me along with him and always encouraged me to come up with a good question for the speaker. :)JEAN: I have a Quora post on my role models here:
http://www.quora.com/Who-are-some-examples-of-older-superstar-female-engineers-Post-40

My mom was a computer science professor and is now a software engineer. She used to debug my code and solve the calculus limits I couldn't solve. I was always impressed that she could so effortlessly do tasks that seemed difficult to me without even talking about her work most of the time.

I also had a couple of female professors in undergrad who showed me what life could be like if I continued in the field. They also taught me about things like Impostor Syndrome and how to fit in in a male-dominated field. I have really appreciated the advice, support, and championing I've gotten from them.

Whenever I meet a strong woman, I try to learn from her. I have lots of female friends I've learned a lot from over the years, starting from when I was very young. Growing up for instance I was good friends with Nancy Hua, who taught me a lot about confidence and ambition:
http://www.femalefounderstories.com/nancy-hua.htmlI'm a little late to the party, but if you're still here, care to share about Impostor Syndrome?http://en.wikipedia.org/wiki/Impostor_syndrome

Essentially, it's a condition when people have a difficult time accepting their accomplishments as their own, and feeling that they are an 'imposer' in whatever context they are operating. 

It's that little nagging feeling in the back of your head which tells you that you aren't as good as everyone else, and don't deserve your successo are somehow 'faking' it, while everyone else isn't. 

I'd imagine it also gets way worse if you're in an environment where people like you (due to race, gender, national origin, ect.) are considered the 'other'.When I first started at gradschool for my Masters in comp sci, I felt for the first time since I started studying the subject that I was in the bottom of the class in almost every class I took. I used to joke that one of the professors that wrote a recommendation for my admission was pulling a favor, since he did research there and was an alum himself. I say joke, but it was really wrapped in doubt of my place in the program. 

I slogged through it and barely graduated on time. The feeling that I was out of place never really went away, even as I approach the anniversary of finishing my last ever round of exams. It's really crippling, and I would never wish it on anyone that's looking to pursue their longterm ambitions. Felicity SmoakJean,

After your work on Jeeves do you think that privacy and security features will be a requirement for all programming languages in the future, or that these features will still primarily remain in the purview of development teams and the need of the program?JEAN: As more programs require the programmer to think about privacy, it will be useful for privacy and security features to be built into language, especially as these features become more mature. I see this as analogous to how languages with automatic memory management (Java, Scala, Python, etc.) became increasingly popular in the 90s. They dramatically increased programmer productivity and decrease errors related to manual memory management. Programmers could only afford to use these languages, however, if they could afford a 50% memory overhead. Everybody else still had to use languages with manual memory management like C. Systems languages like Rust are helping improve this situation. For privacy and security, I think we'll see the part of the coding community who 1) require privacy/security policy enforcement and 2) can afford the performance overheads switching over to some kind of automated management.What is your favourite computer science paper, and why?JEAN: I have favorite computer science papers for many domains. A favorite favorite is Tony Hoare's "An Axiomatic Basis for Computer Programming," a seminal paper in software verification, the subarea of computer science that studies how to mathematically prove programs correct. I give a talk here that makes heavy use of Ryan Gosling to communicate the main ideas: https://www.hakkalabs.co/articles/axiomatic-basis-computer-programming-c-r-hoare#!This lecture is great, you are super funny. I'm a CS undergrad at UVA and its interesting to hear you talk about some of the topics we covered in Discrete Mathematics. Sounds like there was some real world application there! Neha:  Oh man I want to say Paxos but is that a cliche?Would you do it again?  (I am asking because I am 45 years old, stuck in my job as a banker, handicapped child and nearing burn out). JEAN: Yes without a doubt, but I understand it's not for everyone. A PhD can be a lonely experience and there is high opportunity cost: there are many things you could be doing instead that will make you more money. In addition, the only additional thing a PhD enables you to do (besides spend a few years enriching yourself) is become a professor or a researcher. It's probably not the best idea to begin a PhD burned out--you're going to need your emotional reserves. (I have more here on reasons to do a PhD: http://jxyzabc.blogspot.com/2011/12/reasons-to-pursue-phd.html)

A masters program may be a better fit. It is a much lower time commitment and much lower emotional cost for someone exploring new opportunities. There are also many online courses through MOOCs that can help you explore your other interests in a lightweight way without too much commitment. You may also want to check out something like Hacker School:
https://www.hackerschool.com/I would like to add that PhD programs in mathematics and computer science are typically fully funded (candidates won't have to take out loans to complete them). I'm not sure how much longer this will stay true, but obviously it's a good opportunity.

Also, CS research positions in the industry are unique. Just read through Microsoft Research blogs and it'll be clear. Also, the opportunity cost will have to be calculated depending on one's desired career path. For example, if you're a CS going into finance(a "quant"), a PhD is generally required but the pay is very substantial and can make the commitment worth it. But it's very hard work and people don't stay in that industry for long. 

Point being, opportunity cost is variable and one should know the uniqueness of CS research. [deleted][Treat yo self]( http://media20.giphy.com/media/13jJIY0llDdip2/giphy.gif?w=320)Elena: Absolutely. And, as lostgateways said, hang in there!Developer here, I already got my burn out 5 years ago and almost had one this year. There is no such thing as a stress free developers job. 

Older developers are also extremely rare, because it is so stressful.I dunno, I started working as a developer after school at a company that was just starting up. The first year was pretty intense (an 80-100 hour week every two months or so, the rest of the weeks about 50-60 hours), but when we had everything up and running and we started improving on what we had, it's got pretty stress-free. Lot's of stress for developers usually means bad management, not that being a developer is stressful.&gt;  Lot's of stress for developers usually means bad management, not that being a developer is stressful.

I agree, I could develop 3 times faster with the same quality and outcome if I am not being crippled and sabotaged by bad decisions.What tools do you use to organize your daily life?Neha: deft for emacs, google calendar, gmail multiple inboxes with a weird starring-system, and evernote.Elena: Evernote is great for me, and also google calendars. I think the best way to organize my life is to make sure there are uninterrupted periods of time to do work. The rest just sorts itself out, mostly.Hey, I work at Evernote (Android Team)! Y'all got premium right? If not I'll send you some codes. Hey, you're awesomeMe too! Hi, Nick! :)wtf is up with editing documents on the android app, the format of my evernotes get all screwed up!Sorry for all the negative comments you are getting in this thread. It certainly is a shame to see this happen on reddit. Clearly there is a bias towards a certain ideology in here. Hopefully over time reddit becomes more accepting of emacs.NEVER! VIM FTWJEAN: I am obsessed with Google Calendar. I use it for keeping track of appointments, tasks, and for organizing my time. I even use it to text reminders to myself to water my plants.

I have a notebook (Postalco, totally in love with it) that I use for to-do lists for the week and day. (Some weeks I am more on top of it with to-do lists than others.) I also use Todoists (mostly around paper deadline times) and Google Tasks (often for administrative sorts of things).

Like everyone else, I also use my email inbox as somewhat of a task list. I aim for zero inbox but I think I average around 25.[I too, aim for zero.](http://i.imgur.com/fFxhde4.png)My 11 year old daughter has recently taken an interest in coding and has asked me to help her find the resources to do it.  However, I have ZERO knowledge in this area and honestly have no idea how to help her, or even point her in the right direction.  What do you guys suggest?  How can I get her involved in coding and help her to learn and understand it - and more importantly, KEEP HER INTERESTED IN IT.  Thank you in advance for any insight you can offer.A fantastic starting resource for parents and their kids is Www.khanacademy.com it is free and I can not recommend it enough. Great! Thank you for the suggestion.Also http://codeacademy.comI've been doing the intro to Javascript and I LOVE it. It's fun! I thought I would find coding boring but now I've joined my schools robotics team and I will be starting C on monday to program the robots.Try out Scratch! It's a programming langauge explicitly for kids. Don't enroll her in community college courses or have her try online resources like codecademy if you want to keep her interested. Go to scratch.MIT.edu and let her have fun making games until she's developed enough knowledge and interest to progress onto something else.I agree that using Scratch is a very good start. 

Harvard's intro to computer science class actually uses Scratch for the first lecture and first assignment.

The lectures and shorts (5-10m videos on a specific topic) videos explain CS concepts really well. After playing with Scratch if she wants to move forward to learn app development, the CS50 course then transitions to the C programming language (which has the same syntax as Objective-C which iOS apps are written in). They introduce the same data structures demonstrated in Scratch and show you how to create them in C. This is very helpful for beginners, as you can better "see" the code structure rather than thinking of it merely as text. 

Some of the later assignments may be a bit challenging but there are many people that would help over at /r/cs50 (the professor and TA's frequent the subreddit), /r/learnprogramming or the message board on the CS50 website. 

Additionally, the CS50 class does have at least one if not more videos on how to create an iOS app with only the knowledge a person would have attained in the first 6-8 weeks of the course.

Resources:  
[CS50 homepage](http://www.cs50.net)  
[*Scratch for Budding Computer Scientists*, David J. Malan](http://cs.harvard.edu/malan/scratch/printer.php)  
[Problem Set 0: Scratch](http://d2o9nyf4hwsci4.cloudfront.net/2014/fall/psets/0/pset0/pset0.html)  
[Week 0, Friday: Lecture that introduces and explores Scratch](http://cs50.tv/2014/fall/lectures/0/f/)There's also snap! Snap.berkeley.edu -- they're essentially the same thing but it's just another alternative for if you feel like switching around! I suggest a good way to start is by making the sprites move. Then try making more complex things like drawing a star or creating a hangman game!Could you elaborate on your reasoning for not having her look into online resources?

I feel that if the child has a passion and an innate desire to learn a subject that she's drawn to, then give her access to all the knowledge she could possibly want! It's not like you should permanently ban all tutorials, but it is better to introduce with something fun and simple. They can find things on their own when they're ready Kids have short attention spans, and throwing her into something like a Java or Objective C course is going to make a kid lose interest very fast. Something like codecademy is going to drag along at a very slow pace, more or less having her copy what's on the screen with no room for experimentation or deviation, and it'll take her hours upon hours before she's able to make something interesting, by which time most young kids will have given up. On the other hand, sitting through something like MIT's free lectures on YouTube is going to confuse her. They're tailored for people who are taking math on the side, from calculus to linear math.

Scratch is designed for kids. It teaches them the essential tools they need to make something quickly, and it keeps it fun. As they progress with scratch, they can begin to make some very complex games, and they can do it much faster and with much more ease than they can with something like C++. 

If I were teaching a kid how to program, I wouldn't want to teach them about manual memory management and bitwise operations right away. I would introduce them to something that shows them just how powerful a programming language can be, while keeping it at a high enough level that they don't need to worry about memory, overhead, or anything. Scratch does that. It will help a kid build enough interest in programming so that when they're ready to progress to a more complex language, they won't be intimidated, discouraged, or lose interest.I agree with you here. My mother enrolled me into a college night course for JAVA when I was in the 8th grade. I was 12 everyone else was an adult and it was really awkward at first for me and I just didn't pay much attention. It was a horrible experience, I got a C and then my mom enrolled me in it for another semester even though I really did not want to. After that year I went from loving learning about computers and self-teaching myself programming to completely losing interest in that science. It has taken me about 9 years since to realize how stupid I was to hate programming after that experience. I really wish I had a CompSci degree instead of a BioEngineering degree as I think CompSci is more difficult to learn and provides one with skills that can be applied to every science and engineering discipline and would allow me to actually research anything. I code fairly regularly but I only ever use scripting languages and have no idea how to make guis and have never formally been taught good programming techniques and skills. I just really wish I had been more willing to pusue getting a solid foundation in programming and computerscience when I was still in school.Hi I just read your story up here and figured i'd share.
I studied Biomedical Engineering and after graduation did a switch to a career in programming, started earlier this year. So far am going great, so it's definitely not too late to make the switch if you really want too. I'd personally recommend C# as a language to learn. 
If you want to know more about good programming practices you can look at videos from [Clean Coders](https://cleancoders.com) or videos from microsoft itself on [Microsoft Virtual Academy](http://www.microsoftvirtualacademy.com/) (I must warn you, the clean coders videos are very cheesy in their delivery, but the lessons taught hold true)Too overwhelming for an 11 year old to try following a college course. It'll just be discouraging. Most programming tutorials are hardly 'college course' material. When I was 11 my dad gave me an old Windows 3.11 computer. I had no internet, but I quickly discovered qBasic and taught myself from reading the help tutorials. Made simple question/answer programs, an "email program" (not actually email) that let people save messages to the hard drive and read them later, and started a pong game. I got stumped by the collision detection (probably didn't even know that term when I was 12), and eventually switched to making websites with PHP. I didn't have anyone in my family that knew how to program.

The only thing that's 'discouraging' is when adults tell you it's too advanced for your level.It all depends on the kid. I started out on Scratch and did that for a couple weeks before deciding "this is boring now!" and moving into ActionScript then C++, Objective C, and a plethora of others... all self taught because nobody else knew how to program in my family either. However, some kids love Scratch and will stay in it for months or years before deciding they want to move on. Scratch is great to keep a kid interested and get the basic logic of coding engrained before moving to text. 

So, like I said. I completely agree with your statement for me but for some kids that wouldn't work as well.It *does* depends on the person (wouldn't even say kid). Of course, kids have a few more handicaps than an adult might. All the same, there are adults who could basically never (or maybe just don't care enough to) learn to code, even in a really simple scripting language.

It *does* depend on the person. I just **loved** the computer, in general, once I had used one. I was 4 years old, when my dad brought home a PC. He got it for work, and work had provided a whoppin' 14.4-28.8k modem (not sure which, but definitely not 56.6k). My first memory using the computer was when I was about 4, so that would've been in 1994. I had found a webpage online, it was on sharks, and it took ~5 minutes to load that page... this was in the day of no graphics, as far as I'm aware of -- only text. There probably were graphics, somewhere, but they were not common *at all*.

Jump to 1996. My dad's gotten a new PC and gave my sister and I the old one. At the time he got it, it was probably valued in the $1000s. 1-2k. I tore the entire thing apart, on a whim. I just stared at the pieces. I wanted to know how the data stayed inside the computer (even if I restart it **whatttttt?!**) Which part did which part? Basic kid questions... **how does this work!?** (By the way, I did put it back together).

Now, to 1998. Grandpa showed me QBasic. I *loved* the computer before, but now I **fell *in* love**. I was hooked. I was helpless to it. I kept learning QB, taught myself HTML in 1999+. I moved onto VB in 2002. PHP/MySQL in 2004 to run a webgame I built (Wizard Duels). Wizard Duels had 5,000 members (maybe 10-20% active) when I finally shut it down.

I started freelancing in 2004. I was 14 years old. I kept doing it. Then I stopped... I went on a hiatus. I couldn't face an IDE for a couple of years. I was constantly moving, had some personal issues to deal with, and was just generally trying to find my way and keep a job from 2007-2009.

Once I had a solid place to stay and a decent job for a while, I started itching to code again. I found my way into Linux and Ruby, and never looked back. I started freelancing again, but this time, as an adult. No more $10/hr. $25+/hr now.

Today I interviewed for a career position that "requires" a college degree. I dropped out of the CS program as it was just too insanely ridiculous to me. Yes, there are great things to learn there, and I loved the professors, but ultimately I'm $15,000 in debt for a piece of paper that supposedly will grant me access to the kind of jobs that I am now very close to getting without ever having that piece of paper to begin with (**wish me luck!**)

Programming is truly a form of art. While the general populace may not quite understand our code today, it remains an art to those that do. There was a time when the vast majority of people were illiterate, and perhaps weren't able to appreciate creative writing as much as we are able to, today. That went away. 

I believe, or at least I hope, that one day, programming will be taught to all children. It is nearly always applicable to a given problem, and more often than not, it yields a better solution, in a shorter amount of time, than a man or woman could on their own.Programming "the right way" is really complex, even just the basics of getting the software to write complex programs set up is enough to frustrate experienced programmers. (Which is why companies have teams dedicated to setting all that up for the other programmers).  A big part of the learning process in programming is often doing things the "easy, wrong" way first and then later switching to the "hard, right" way.I'll share a story. Before Google I was in elementary school and I picked up a book called programming. It had these "codes" that would create games. Elementary school me thought that entering codes was just like entering a cheat code. So here I was, at the desktop, typing away this program expecting a game to pop up when I hit the last character.

Obviously it didn't work and I didn't learn to code for another 7 or 8 years.

If I had personal guidance I probably would have learned then and who knows where I'd be right now.That's amazing!  It's great that you are encouraging her.  I definitely recommend groups like Pyladies and Girls Who Code.  

Edited to explain more about why I recommend those groups over (but not instead of!) gender-neutral ones or online resources:  First of all, you should try everything!  But I personally have found groups like [Pyladies](http://www.pyladies.com) awesome because they specifically focus on mentorship, and I bet if there's one in your area they would love to help your 11 year old daughter.  Face-to-face learning in a warm environment can help someone stay committed.Excellent! Thank you so much for the response. Adding onto OP, get her on Code Academy. Its online for free. It will be basic enough to get her started. I've been recruiting so many friends at school with Codecademy. (FTFY) So many people who I'd have never thought would be interested in computer science have been asking me for help. I'm spreading the love :PCode.org ! [code.org](http://static.studio.code.org/) is a page where kids can learn programing with (graphical blocks instead of code) with help of Elsa from Frozen.
Interesting for teaching programing is also [RaspberryiPi](http://www.raspberrypi.org/) (32$ computer). It enables you to interact with real world. (Build automatic doorbell or some other project). [This](http://www.raspberrypi.org/tag/amy-mather/) are some of the 14 year old girls projects with it. (with some help probably) Some of the other [girls projects](http://www.raspberrypi.org/charlotte-latin-girls-give-a-tedx-talk/).

And for android there is [AppInventor](http://appinventor.mit.edu/explore/) which enables you to create whole Android app with graphical blocks instead of writing code. It's easer to start that way probably.
If she likes playing games and after she knows some programming (or not) there are code games, where you write code to play game. Like [CodeCombat](http://codecombat.com/).

There are a lot of resources also on [Lifehacker](http://lifehacker.com/how-and-why-to-teach-your-kids-to-code-510588878).

The biggest motivator in coding is the desire to build something or to make something easier. We programmers are lazy. Maybe she wants some app on the phone to make her life easier or something.I guess I should clarify that she wants to start with app development for Android and IOS.Seeing as she is 11 years old, I wouldn't recommend Android or iOS app development. It's a pain in the ass to get started and it takes a long time until you can finally make something like a proper app or a game. I'd suggest robotics, because it teaches programming very well, is relatively easy and can be a ton on fun.
This is a great comment and i'll expand on it.

App development is mainly done in the Java language, which is almost solely Object Orientated, and app development is not easy to dive into for a beginner or even someone of intermediate knowledge. The best choice for a beginner would be an easy to use language that has a large fanbase, which means lots of public modules (that allow you to do cool stuff with your code), and lots of people that are willing to help you when you have trouble (and you will).

A good and popular starting language is Python, as it is easy to read, there is a good documentation and a there are a lot of free online courses for it. With python you can build anything from text-based adventure games to graphical math plots to webscrapers, port scanners, task automations and a lot more.

If she's interested in web design then HTML, then CSS, then Javascript would be a good route. All very standard languages that are pretty much universal.

In terms of resources, go for:

http://www.codecademy.com/

http://code.org/

You will see a lot of coders trashing these sites, but that is simply because it is more centered towards absolute beginners (like your daughter), not people with a basic understanding of programming (which is most of the people that post on coding subreddits). Another great resource for python is http://learnpythonthehardway.org/ and you will see it recommended a lot.

Also, check out /r/learnpython and /r/learnprogrammingSecond for Python as a beginner language. Object-Oriented design is incredibly complex and is one of many different programming strategies. Lots of people start with Java and get a warped idea that OOP is all there is to programming.

Python has a powerful object-oriented layer as well, so once she's ready to delve into programming design patterns, she'll be able to apply what she already knows with Python.

It's super flexible and it scales well from 'Hello, World' to reddit, ~~Twitter~~, and YouTube (all of which use Python on their servers.)Have her take a look at Scratch (actually from MIT): http://scratch.mit.edu/

It's a very "visual" way to learn programming and the skills she learns there will be useful even in other fields.I am not OP, but my suggestion is to track down either local high school computer science teachers, or if you're lucky enough to have a college or university nearby, find a cs professor, and contact them asking about learning opportunities in your area. Most of the time, teachers and professors emails will be easily found online and I am sure they would love to give you advice specific to your area.

If your child is the type to absorb knowledge in areas that interests her on her own, I suggest looking into ALICE, it's a very accessible coding program that I remember being taught when I was graduating High School. In college, I took a class that was along the lines of a programming art class. We used a program called Processing. It allows you to use Java to create interactive art, so after a few Java lessons, if your child has any interest in the creative side of programming, this could be a resource. Do I need an undergraduate degree in Computer Science to pursue a career or a graduate degree in Computer Science?Neha: You don't need one.  But if you don't it's helpful to have a background in something like math or physics.  You just need to convince the admissions committee that you're capable of doing good CS research.I've got a Ph.D. in CS. One of the guys I went to grad school with majored in English and minored in CS. He's a really solid computer scientist. You don't *need* an undergrad degree in CS, but you obviously need to have the basics down if you want to go into grad school for CS. Engineering/physics/math could also work.I had zero programming experience before heading into my CS degree. One of the things that attracted me to it was the whole problem solving aspect. I had a reasonable grounding in mathematics and physics, but having the chance to create solutions to any sort of problem is what inspired me.How much did grades matter to get to where you are now?I think grades matter a lot to get into grad school, as in they are usually necessary but not sufficient.  That said, there are lots of exceptions!  MIT is definitely the type of place which cares more about what you do than your grades.

One nice thing is that MIT EECS doesn't even take GRE scores. - nehaI feel like you're undermining how hard it is to get into these programs. Grades don't matter only if you have really good grades I guess? For example, I'd be very curious if you could give us an idea of what set *you* apart other than grades that enabled you to get into this program. This would also motivate people in the right direction! Necessary but not sufficient seems pretty fair. As in good grades alone are not enough.

In my grad program (not MIT) if you have a proven record of getting papers published, that is worth a whole lot more to the gradduate admissions committe than good grades. I assume similar things might apply at MIT, where if you are published in top conferences you can get away with average with a lower than A average.Neha: I don't mean to say grades aren't important -- you're right, if you took a survey, most of the people in top programs will have great grades.  

BUT I think you can get around bad grades by doing something really cool.  Different professors care about different things; for example some will care WAY more about your projects/open source code than your grades.&gt; BUT I think you can get around bad grades by doing something really cool. Different professors care about different things; for example some will care WAY more about your projects/open source code than your grades.

They care way more about this only if the projects are either extremely well known or done for extremely well known places. You are not getting into an R-10 CS program with bad grades by having a few low impact/no impact open source projects under your belt. In addition some schools (not MIT) the GRE is considered as important as grades as well (some places with hard cutoffs). 

In reality you have to have some **really** convincing third party work to have any chance of getting into an R-10 with bad grades (and in some cases mediocre GRE scores). And let's be honest. By bad grades we're talking 4.0. I'm a PhD student at MIT and my undergraduate GPA was 3.67. Good, but not amazing. If you just count my major GPA though, it was a 3.9. GPA matters, but research experience, letters of reference, and statement of intent all matter a lot as well. I had an undergrad GPA of 2.58. My top grad school pick required a 3.0 minimum and had an average of a 3.6. I got in. If your other materials are solid, you're honest and put forward a good energy you can do whatever. 

A scholarship I applied for required me to discuss a breakdown of how I'd spend the money. I wrote a pizza allocation paragraph and got the scholarship.

Be honest and genuine with a slight aggression. At least that's what works for me. 
I'm glad you pointed this out I've been thinking about grad school after I finally finish my bachelors, and while I've been close I've never quite cracked the 3.0. Too busy trying to stay afloat while I finish my undergrad.

It has been a long road but I'm excited about applying after a break to recover my sanity :)I have always taken the approach of working on an awesome research project as my top priority, from high school through to today. That's how I learn about something deeply. Classes are nice, but... my grades in them did not get me into college or grad school, as far as I can tell.(I am another PhD candidate at MIT, but I am in the chemical engineering department. Jean and I are friends and we are linked through the mentorship program within Graduate Women at MIT)

I would say that at the level of MIT and other top tier graduate schools, grades tend to matter "a  lot". I one asked a professor (at Stanford, where I was also accepted into their PhD program) how they pick people, and he said simply "we ask for people who 'have everything' - grades, test scores, research, resumes".

My understanding is that in general, the admissions offices get a bunch of applications. Of those applications, a certain group is accepted outright (stellar grades, stellar test scores, stellar recommendations, everything). Another group is rejected outright. The third group gets reviewed by the committee and some professors, and then they have a meeting where they discuss who they should accept and why.

My advice, is that as best you can, try to be in the group that gets "accepted outright".

Some ancillary advice is that if you can afford it, do the Princeton Review program to take the exams. It worked for me twice (SAT, GRE).What is your favorite part about programming/what was it that got you passionate about pursuing it at this level?Elena: the power of automation! Seriously, programming makes me feel like a magician sometimes. :)Do you have any recommendations for someone trying to get into programming and artificial intelligence without formal training?

Also, what languages would you consider crucial for your programming?

Thanks!Elena: I learn the languages that give me the most leverage on a problem. There is no one best or most crucial language! Given the resources and support available online, I recommend Python as a starting place. This online course starts soon, and has a great lecturer, Prof. Guttag! https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-0#.VItJ0lfF-dAAre you in any way treated differently from the male computer scientists? Both positives and negatives. JEAN: Yes. Especially when I was younger, I noticed that people did not expect me to know very much. While some of my male friends could walk into a room and have people listen to their technical ideas by default, I had to do some amount of proving myself. Now that I have more credentials it's become easier because rather than having to do this whole song-and-dance to demonstrate my technical credibility, I can say what I've done in the past. This can be exhausting--and certainly made me doubt myself more when I was younger.

An advantage of being one of the very few women in a male-dominated field is that people remember me. At some of our conferences, there are hundreds of men and less than 10 women. People are more likely to notice me and remember my name than someone who is just another guy in a button-down shirt and glasses. I feel like this has given me a good platform for spreading my technical ideas.[deleted]Fuuuuck that sucks. I'm not a woman but I'm black so I completely understand being dismissed almost automatically. When I'm doing a group project,  people almost always assume I'm the freeloader. I always have to "lay down the law" so to speak and let everybody know that I'm pretty damn smart. Sometimes it makes me look arrogant but hey you can't win every battle. Interesting perspective! I'm a woman in a male-dominated field, and you made me wonder whether I am too afraid of coming off as arrogant. More thought required :)Interestingly this isn't something I have experienced at all. In fact, many of my classmates come to *me* for help. I was so worried I would encounter what you've described here, but I haven't yet. 

But most guys in my class are like 20. It could be they are in a generation that doesn't have the same paradigms, or it could just be that I am older than them by enough years that it's just natural to look up to me? Not sure, but glad I haven't felt this need to prove myself 

I do still get this sort of thing from older men, women too actually. But I rarely have to deal with such people, mostly just my FIL and I think now that I've helped *him* with his work, he is coming around. I'm a sysadmin and I never usually have trouble with guys my age either. It's the older ones. When I call vendors on the phone and start discussions usually the first thing they respond with is "Okay, we'll probably need an IT person on the line as well though, miss" 

I never bring it up and simply respond "Oh I am the systerm administrator" but the assumption bothers me. Nearly every call they ask for an "IT guy" before we start and I've sure as hell never heard my coworkers on the line saying "Yes I am the sysadmin". The tickets I submit are always very detailed and technical in nature so I'm not sure where the assumption I don't work in IT comes from if not my gender. I get a very mixed response. While the males I work with are very progressive and open-minded people, I still notice the telltale signs of ignoring my expertise or arguing with it that I've had more blatantly from other males. I've started to get very impatient with them and don't bother explaining myself anymore. They can take my advise or leave it, I've had enough of arguing.

I think it doesn't help that the deeply honed analytical and logical nature of being a Comp Sci makes them largely very cynical and prone to questioning everything. I love these guys, but some days I want to strangle them.Wife of a computer scientist who used to be a computer scientist. I got so tired of it I quit. Micro aggressions are real. Ugh.[deleted]That's interesting and sad.  From what I understand my mother taught my father through their programming courses in university but by the time I was in 3rd grade only my Dad was working in the field anymore.  There are of course a million possible reasons for this including my mother's desire to stay with the kids more or my father's business acuity, but it does beg the question was the field simply just too hostile for her?I'm a recent male CS major and I catch myself doing that all the time. I think for myself it has to do with most women I meet aren't very technically savvy so when I do meet a woman in a technical field my biases show. Everytime I catch myself doing it I try to remind myself how much of an idiot I'm being.It's good to know you are aware of the biases that exist. If only more men were aware.
I once went to a collegiate hackathon with my boyfriend, who is a math major. I essentially made the entire app myself, but when it came to presenting the app at our booth, everyone immediately went to him first for an explanation of how the app works. He had to defer almost everyone to me.Neha: I don't think any two people are ever treated the "same", male or female -- we all have inherent biases that come out in different ways.  An environment that is predominantly male feels different than one that is more balanced.  I found I prefer the latter, but sadly don't have it often.Female CS grad here.

CONS:

- I've been turned down for jobs because "well, you seem like you know what you're talking about" and that made the interviewer suspicious after acing a coding exam.

- I've been treated like i'm an intern and/or have 0 experience.

- I've been talked down to constantly: "Oh looks like you getting the hang of it" as i'm verifying data with a simple select statement.

- I've been given menial tasks that don't require a degree or any cs knowledge while my fellow intern who was a year younger than i, from the same school, who happened to be male, was given full developer tasks

PROS:

-  ???

In all fairness i do like my career, and those cons are by no means an example of the industry as a whole but they did happen to me and it did suck.


Edit: Typo, oops! (Where's my intellisense?! lol)

Edit Edit: quoting myself from elsewhere here

&gt;These events stood out to me as potentially being biased because of the context: some because I had guys around to compare my experience against, and some compared to my qualifications and experience which, while not massive, is far from nonexistent.

&gt;Its still very possible that I misinterpreted something along the way, but something definitely felt off.
Male dev here.

And sadly the exact same things (mostly points 2 and 4) are/were happening where I work with a young girl we recently hired.
Since I understood she knew her good share of stuff I was so angry that at some point I jumped over my bosses' head and I assigned her some high profile sub-tasks of a project I'm following, which she finished carrying out successfully today. Now let's see how it will go, but it seems she'll get to handle the important code.

This story, however, made me angry beyond imagination. I've been for years at a job where your age exclusively dictated your experience and pay, so I know the feeling (or at least a good part of it).Thanks for being awesome and making the work environment better for her. Hopefully everybody will think like you eventually.Another con worth mentioning:  I work in an office environment where we can choose our own teams to work on special projects outside of daily tickets.  Despite repeatedly expressing interest, asking to be part of certain teams and showing qualifications to work on specific projects, myself and the few other female developers in my office are consistently passed over by team leaders in favor of recruiting male devs who haven't expressed any interest in their project.  

Our office is so social that they just want it to be 'the guys' and, regardless of the work that needs to be done, they don't want the change in the social dynamic that a mixed group brings (I'm not assuming here, because I've actually been told this by the male devs at work).  So because we are the minority, we get squeezed out.  It's not intentionally against me, but it impacts my career nonetheless.  I don't say anything because neither myself or the other 2 female devs want to be 'that girl'.  And we don't want to make some sort of all-female girl-power group because that feels demeaning and like we are trying to leave out the men.

I'm friends with the 40 or so male devs.  We have to be close to work together to support a team of 2000+ employees.  I go to their houses for bbqs, we hang out outside of work, I am the commissioner of a sports league we all participate in and I'm involved in many extra curricular dev groups with them.  They will recommend me highly to other team leads for projects, but none of them ever actually picks me.  It's weird and upsetting.OMG yes. Thats actually partly why i left my last job. I wasn't cool enough to be included with the dudes....&gt;  "Oh looks like you getting the hang of it" as i'm verifying data with a simple select statement.

HAHAHAHA! I work with SQL so this made me laugh more than it should have. was this in school or a job?! God it better not have been a job hahahahait was a job, it was yesterday :(  The select was maybe 12 lines long and had a single where clause. I was flabbergasted.
select dumbasses 
from myworkplace

Jim
Bob
Dan
KylePros:

You get to code and that's pretty funTrue, but guys get to do that too!With regard to the "positives" you seem to be expecting, I'd like to point out the wikipedia article on benevolent sexism.... Hint: it's still not a good thing (_for women_) even if it apparently helps in some immediate capacity.

With regard to negatives, you can see some of them in this very reddit thread! People accusing them of not having to work hard to get where they are because of affirmative action and the like.Link: http://en.wikipedia.org/wiki/Ambivalent_sexismYay, I love this post. Im a woman studying artificial intelligence as an undergrad. Im having trouble narrowing my interests and deciding on what I should do after graduation. Right now Im trying to focus on classes that go in-depth into probability and optimization models. What were the most useful classes you took as an undergraduate?Neha: I can tell you what I think would be useful to take right now:

* Probability
* Some kind of systems class -- operating systems, neworking, distributed systems
* Machine learning!  This is blowing up, due to the popularity of "big data".  Buzzwords aside, there are a lot of insights to be gleaned from logs and user tracking.How did you get into programming? What do you hope to do after you complete the program? What is it like to be a woman in the computer science field?

And thank you for doing this AMA! As a girl in her 20's who recently picked up programming, I am excited to see your responses! :)JEAN: Both my parents are computer scientists and we've had a computer since 1994. I was an only child so I played with the computer a lot. I didn't have that many games so I started making my own user interfaces in Visual Basic. When the Internet came about, I was really excited to talk to other people in the world because I was pretty bored. In middle school I was really into Tamagotchis and had a website dedicated to them. The social (or faux-social) aspects of computing were really compelling to me.

I hope to be a professor after I finish my Ph.D.

While I enjoy being a person in computing, it gets kind of lonely being a woman in computing. The experience of women in computing is different than the experience of men because of the way the world interacts with us, and so I find that there are few other people who can relate to my experience of the world. It's great to find other women in computing (or similar computational/male-dominated fields) with whom I hit it off. Some of these women are my best friends. (Some of the men in computing are also my best friends.)

Keep up the programming! It's an incredibly empowering skill. :)&gt; making my own user interfaces in Visual Basic

[Did you track a lot of IP Addresses?](https://www.youtube.com/watch?v=hkDD03yeLnU)To be fair the only part of that clip that is reasonable is that visual basic was very good at making GUIs.As a man I too am saddened by how I can't relate to women about what I do for a living.

A different kind of problem of course but I hope more women continue to take an interest in this line of work.Neha: It just gets worse the more specialized you get.  I have trouble talking to non-systems people!Haha love it. I have trouble with the imprecision of human spoken languages at this point I showed my female roommate some java code one day. At first she thought it was all random letters and numbers, then I explained to her what each part of the code was doing and she had a huge lightbulb go off in her head. It was amazing!I think a lot of people expect programming to be more arcane and inscrutable than it is.  It takes a bit to get the hang of, and some people just don't naturally think in the right way for it, but plenty of people just assume it's complex and too hard without trying it.

I knew plenty of people who took intro CS early in college just for a science credit and ended up loving it and taking way more CS, and also plenty who took it as a fun, easy course or out of curiosity junior or senior year and ended up wishing they'd taken it early so they could have had more time to take more.Shh, don't give away our wizard secrets!&gt;  At first she thought it was all random letters and numbers

sounds like you need to rethink your variable naming conventions...It seems like a lot of girls who get into this field have parents who are already in STEM fields. Do you think that these fields should be more marketed towards girls who might not have that "advantage" of their parents sitting them down and teaching them stuff?

Just a bit of background about myself, my dad is an Engineer and mom was a Telecomms Systems Engineer (her credentials didn't transfer over here and the content she learned isn't really applicable here because everything is Digital and not Analogue anymore so she works as an Electronics Technologist). My brothers and I are all in STEM fields not because we were pushed to it but because we have a genuine interest in it after going to our parents' workplaces during take your kids to work day or whatever.Neha:  My first brush with programming was my dad (a doctor, not a programmer) typing basic into our Tandy.  I wasn't really interested.
Eventually I took a class on Hypercard.  Still wasn't interested.

I loved math, and didn't ever really intend to study CS until college.  I actually *don't* plan on being a professor.  I'd like to build the tools and infrastructure that enables the next set of amateur programmers to build scalable, correct, awesome things.Elena: @Neha: I want to hear more about those tools and infrastructure! Seems very relevant to my own research goals. :)Elena: How did I get into programming? My dad sat me down with a student version of Matlab and taught me how to filter sound files from my favorite game. I hope to be a college professor in CS somewhere, after I finish my PhD program. I'm so happy you're getting into programming as well! Oh god your first language was MATLAB. I'm surprised you weren't scarred for life!Hi! Do you see regional/cultural differences in research trends, like west coast vs. east coast vs. Europe and so on? What are the opposing camps?Neha:  No, not really.  There's more differences in style between areas of computer science, not in the same area between geographies.(This is a very interesting question)Not OP but I would say the opposing camps are based on industry. Mechanical/manufacturing/production codes are written quite differently and using different tools than webapps/mobileapps, for instance.What's the most valuable lesson you've learned from your respective advisors?

(Not that I have any vested interest in passing them on to students at another university or anything...)My advisor taught me how to put myself out there and how to fail. When I showed up to grad school, I was a major perfectionist. I was so unaccustomed to getting points taken off my work that it broke my heart to take off points from *other* people when I was a grader/teaching assistant. After I got to grad school, my advisor pushed me to put myself and my work out there every chance I got. He made me commit to giving talks and submitting papers at specific deadlines. It didn't matter if I was ready or not--he made me do it. As a result, I put out a lot of half-baked work that nobody really understood or cared about at the beginning of my Ph.D. Fortunately, my advisor also made me stick with it so I saw this turn into work that was more understood and accepted by the community. Because of this experience, I'm much less worried about putting work out that is not "perfect"--and I also understand that ideas often don't emerge perfectly polished and that's all right.

A related thing I learned was that commitments and deadlines are *really* useful for making myself do more work than I thought I could do.

Thanks, Armando. :)Neha:  I learned to think critically about an undefined problem.  And to have high standards for myself.  Ultimately whatever I accomplish is for me, and I should believe in it.

I've also learned a TON about writing and giving presentations.  We do a lot of practice talks in our group to prepare for presentations, and these are somewhat notorious for being... harsh.  I think that's been key to getting better -- you can't make your work better without knowing what the problems are, and there's no need to sugarcoat it too much.  I've developed a pretty thick skin!What do you think when people like Elon Musk and Stephen Hawking make dire predictions about AI being malevolent?Elena: I'm not worried. I bought the book! http://www.robotuprising.com/home.htmOn the topic of kids, how early do you think programming could be introduced? Things like MITs Scratch are simple enough, could you start at 6 or 7? What about mathematics, algebra, trig? I have seen parents drilling that stuff starting at pre-kHi. I am a teacher of Computer Science at a High School in the UK. I am trying to attract more pupils to the subject, especially girls (currently a male dominated clasd).  What tips could you give me to spark their interests when it comes to recruitment?

Elena: I never took a CS class in high school. It was AP CS, in Java, and just seemed incredibly irrelevant to me. I was coding in Matlab and C, doing pattern recognition and signal processing on a dataset of brainwaves posted by NIPS. I cared about the brainwaves, and the best way to extract information from them. I didn't care about programming itself. This is a long-winded way of saying that I think we can bring in folks (high school girls, for example) by showing them how programming is a critical piece of something bigger that they may want to create!This. So much this. I love programming. Its so cool that I can tell my phone, or computer or anything really to do something and it does it. 

But when I started to learn it was because that's how you make games and who doesn't want to make their own game. Programming was just the tool I needed to learn to use to make it happen at the time. 
Absolutely! 

Many intro classes hurl 1000 pounds of theory at you to start. I see peoples' responses being: "This is hard. Maybe programming isn't for me."

On the other hand, I'll see people that play an amazing video game, and come to the realization that they too can create something amazing. That dawn of inspiration. That *passion* that emerges. They're response becomes: "I'm learning this shit *now*. Sign me up for every god-damned class!" The majority of CS majors at my college were there because of video games. 

However, inspiration doesn't have to come from video games. A long time ago, me and my classmates got excited about programming our TI-84s to cheat on our Trig tests. There needs to be some will, some drive, to learn programming, or it's just work. JEAN: Glad you are asking this question! Something I feel strongly is that teachers should use examples in class that interest both genders. Many of the examples that had to do with the more interesting math in my classes talked about things like baseball and poker. I really don't care about either and for a long time I just thought maybe probability theory wasn't my thing.

Here are a couple of projects/units that I've seen that I think appeal to young girls:
- In middle school, we had this "bakers' dozen" project in Precalculus class during which we got into groups and pretended to run bakeries, calculating and predicting the kinds of ingredients we would need and the profits we would make.
- When my sister was in elementary school, they had a budgeting unit where they drew different kinds of life paths from a hat and then had to make budgets based on that. Projects like this that are relevant to life but also involve math really interest girls--and any socially focused child.When I was younger I got really excited about making my own choose your own adventure games, although they were crazy basic.  It was a really fun way to be creative in multiple outlets!In high school kids are too self conscious to go into a nerdy subject. I took computer science but was massively embarrassed to be seen in the class. 

Might not be the subject matter but just the environment This is incredibly true.  The "weird kids" took the CS classes at my high school.  The CS program was absolutely awful.  Most of the kids in the classes had taught themselves programming and took the classes as electives.  My school was way too focused on AP classes to consider an actually applicable skill like coding...You basically described exactly how it was at my school. You had to choose one mandatory career prep course in grade 10 and programming was one, but it was more resume design and stuff than a real programming course. 


I was 'normal' by the standards of that class, as in I showered and didn't play magic the gathering constantly. Not the best atmosphere to convince people that programming isn't just for geeks. Hello,
I am a female grad student and the one thing I find myself struggling is that there is so much information to consume. There is so much to share.

Read papers, follow twitter, follow conferences, Quora, manage blog, carry out research, RAship duties, TAship duties, family and my health. I find myself running and do not understand what to choose and how to manage things! I am sure you must have gone through this too. How did you learn to balance things?JEAN: If you list them all out, this does sound like quite a lot! The solution is the aggressively prioritize. At some point, I decided my health was top priority, so I never skip meals or exercise. (Although sleep is less important to me.) Then it's a matter of fitting everything else around it. Having some semblance of a regular schedule really helps impose order. During the work hours, research takes top priority. When I've had to TA, I sometimes put an upper bound on the number of hours I was willing to spend on it and forced myself to stop instead of being the best possible TA. When I was a younger student, I prioritized reading papers more, but these days I mostly spend time executing rather than trying to figure out what the rest of the world is doing. I think that is important for diving deep into some topic. Inspired by Donald Knuth's permanent email sabbatical (http://www-cs-faculty.stanford.edu/~uno/email.html), for a while I tried to work without email to see what it would be like. It turned out life goes on without following Twitter, Quora, etc. (And though it might seem like I am constantly blogging and doing things on the internet, a lot of this happens in bursts when inspiration strikes. I mostly do it as a break and I really don't prioritize it over other things.)

I also find having rules helps. I block Twitter and Facebook on my work computer between the hours of 9am and 7pm. I get my email delivered to my inbox twice a day, at 12:30pm and 5:30pm. I also have life rules about how I do plans: I really try not to cancel plans with friends once I make them, so I'll only make plans if I am fairly certain I can follow through, and sometimes I'll make plans on purpose to force myself to leave the office at a certain time.

As for figuring out what's important, meditation helps. Also sometimes waiting to do something, rather than rushing to do something out of anxiety, can help you figure out what's actually important versus what feels important in the moment.
Neha:  Oh man I know exactly how you feel.  At some point Twitter became impossible.

I like to switch back and forth between thinking deep and wide.  It's important to take time to really dig into a problem, and when you do that, it's best not to worry about the river of information.  When you come out because you're spent, then you can handle the other stuff.

Prioritize the most important thing you should be doing instead of the most immediate.  I think Cal Newport has a pretty good take on this in his blog (also a former CSAIL PhD student!)Hello, thank you for doing this AMA. I have three questions I would like to ask.

What would be a good thing to learn for those that are trying to get better at coding?

What each major coding languages such as C++, Java, Python, etc are good at?

Any good resources out there that are to improve software skills?I have a webpage on this!  But it's directed towards people who are really, really beginners.  Short answer is I like Python for learning how to code, and the book Learn Python the Hard Way.

Once you know the concepts in one language, it's easier to transfer them over to others. - neha

Edit:  Here's the page: http://pdos.csail.mit.edu/~neha/code.htmlShouts to Zed Shaw thoC: system programming, OS kernel, high performance applications

C++: High performance applications, and games

Java: high performance web applications, cross-platform tools in general

Python: General purpose language very good for quick development, very useful for web/REST client/server development with frameworks like Django, Flask and python requests. Very useful in security with frameworks like scapy and modules like requests, and pycrypto. Requests alone is enough for me to want to use it. Functional, object oriented, fun language. My favorite.

Ruby: Falls under all the use-cases for Python. General purpose, web dev, security (metasploit modules especially)

Perl: systems stuff, linux. Lots of old tools are built in it. Regex!

Lua: great scripting language, but not as popular as the above three. GREAT for game development, works well with C and C++. Make the game engine in C++, design the level scripting with lua.

Javascript: Client-side web development. Pretty much invaluable in web dev, especially if you want dynamic pages. Lots of web apps use javascript to do the bulk of the work and rendering. Frameworks like backbone, angular are awesome. Even if you design a site in Python Django, you're probably going to be doing quite a bit of javascript for the front-end.

Rust: systems dev, memory-safe C basically.

golang: Lots of ex-googlers use this, so you actually see it in the work world. Cool language but gets a lot of flak for some inherent design problems, like lack of generics. Still, a useful language for easy concurrent code that is used a lot, especially at google.

Scala: Getting pretty popular. Speedy development of apps that run on the java VM. Very good for scalable architecture, and using stuff like apache Spark for distributed computing. Very concise language, very functional.

C#: Great for Windows, for app development, game development, web. Not too much experience here, but it's a pretty damn good language, close to Java but cleaner syntax IMO, and faster development. High performance. The Common Language Runtime can be used through Iron Python, and I believe a ruby implementation as well. Cool stuff, but I don't see it very much from my linux/mac world.

Forgot Assembly!

ASM: Great for reverse engineering compiled applications and just for understanding in general how programs and computers work. Pretty essential for some security applications, and understanding exploits and bugs. Essential for the higher performance applications, so you can see what's really going on, and tweak ASM to be faster than even what your compiler produces. Not that you'd generally code your whole program in ASM, but a lot of guys will tweak functions and use features of their CPU which the compiler wouldn't know to use. Not very portable at all! Code is very specific to your CPU, sometimes even to the model, eg. intel i7 will have 256 bit floating point registers, and i3/i5 have 128bit I believe. For that reason, if you use packed-add/sub/mul/div opcodes for 8x32byte ints on an i7, you'll never be able to run that program on an Intel i3. However, knowing to use SSE operations like that can be extremely useful for performance and beating the compiler. Think, matrices and linear algebra.Elena: What made you decide to focus your research on CS education versus robotics? 

Jean: What is a monad in three sentences or less? Also, why does functional programming make sense if arguably, the whole point of running a program is for its side effects? 

Neha: I'm a new web startup with a reasonable amount of funding for the foreseeable future. My product is doing well and I expect it to take off in the next few months. What database do I use, and at what isolation level?JEAN: Great questions.

A monad is a structure that keeps track of your state for you. In a Python program or a Java program, the state is often intertwined with the program and you have to reason about everything together. A monad lets you factor out the parts of the program in which the state is changing from the other parts and deal with them separately.

Functional programming gives us a simpler--and arguably more elegant--way to think about programs. Things that happen in a functional program are more like math, with equations and truths about the world, rather than a sequence of actions that change some state of the world. When state is changing, we have to think about how that's happening and whether that's happening correctly. This often leads to making mistakes, since it requires keeping a lot more in our head. A functional programming paradigm simplifies this but allowing us to think of our program as a series of operations that turn one value into another value into another. By allowing us to factor out state, monads allow us to express even side effects as these transformations.Elena: Well, I spent a long time in robotics, and during that time the mathematical tools my lab was excited about using slowly shifted toward types of math I wasn't that interested in. Meanwhile, I was TAing undergraduate courses for the EECS department and seeing just how poor the division of labor was between TA and machine. Hence, my switch to Human-Computer Interaction!I am a male programmer. I, too, would like to see more females in engineering. You ladies are doing a wonderful job in being role models for young girls interested in engineering, how do you think guys can help out?

cheers!

**Edit**: removed a comma JEAN: Great question! Men can be great role models for women too if they make themselves available and relatable. Growing up, some of my role models were men too--men who were doing things I found interesting and who I thought were nice people. Several of my mentors to whom I turn for both professional and personal advice are men. Part of it involved me seeking them out because of common research interests or something like that, but they also made themselves more relatable by opening up about their own lives and how they saw me as being similar to them. I think if you are visible to younger women and encourage, support, and champion them, you could make a big difference in their lives too.My (step)daughter followed me in my footsteps and became a developer :-) 

Once in a while she starts to doubt herself that she works so hard and has so little progress. but I tell her time and time again, that it is an illusion. Software has this annoying property that it is so abstract that you can't measure your progress or even compare it to your colleagues.

And the most frustrating thing is that I do great works, but my partner can absolutely not grasp what I am doing. There is nothing visual except of a whole bunch of text code. Also for security reasons I cannot tell my partner everything I do. What are your parents like? Do they all have degrees as well, I'd imagine? What kind of economic backgrounds do your families come from?

I ask this because I'm in a (not unique) situation where I have a 3.5 year old daughter who isn't dumb. I'm also fairly poor. So here's my question I guess; this may be beyond your pay scale, but what can I do to break this cycle? The thing I struggle with is not having any point of reference to fall back on in regards to raising my daughter to be the kind of woman I want her to be, especially in regards to schooling. 

A quick little insight into what I mean here:

I was enrolled in a gifted programme in public school (that's a whole 'nother discussion altogether now), and I'm 35 with a grade 10 education, if that. Grade 9 I won a Pascal math competition for my school, received a certificate for being in the 75th percentile for my entire country, got a 65 in math that year, failed it the next. The reasons for this are many, but my concern is making sure this doesn't potentially happen with my girl. The problem I'm finding with myself is not knowing what to do in order to limit that possibility.

How did your parents interact with you? How did they foster positive learning habits? How did they challenge you, because you were/are (assumedly) smarter than your average bear? How did they make learning "cool" so you didn't end up on okcupid with bleached blonde hair and bedazzled nails at 21 looking for a "sugar daddie or daddies" (sic). 

I ask the economic question because growing up poor means I grew up around (mostly) kids with other poor parents, and those kids are now poor with their own poor little rug rats running around. I don't think this is any sort of ground breaking revelation here, but poverty on average begets more poverty, and this lack of knowledge I'm talking about is *one* of the reasons for that in my opinion.

Thank you if you read my novel and made sense of it. I don't think you fully grasp how much of an inspiration women like you are in a world full of Iggy Azalea wannabe's. The amount of questions an ama like this receives versus some propped up pop star is...disheartening, to say the least. Thank you again for this.

PS: since we're in a SMRT people thread, anyone that likes doing this type of thing, feel free to grade my post for errors. 

It doesn't mean I'm wrong, it means I'm learningTMNeha:  Wow.  This question is amazing, and I am in awe of what you're trying to do.  You're inspiring!

My parents came from India, and were not particularly well off when they first had me.  They STRONGLY encouraged me to do well in school.  They put me in after school science programs, encouraged me to be good at math, the whole deal.  Getting a B would cause a serious conversation.

I think two things are super important:  1) Instilling a sense in her that if she tries hard enough, she can solve any challenge put in front of her and 2) getting her around people who share the same goals.  A friend group who share the value of wanting to do well in school and go to college can be really helpful.As a CS professional who did not come from a life of privilege and whose parents did not graduate from college (although my father did attend for 2 years), please let me contribute.  Although my family was not wealthy or privileged, we were also not destitute.  We always had food and a roof over our head.  So I grew up lower class or lower middle class.  I had no private school.  I had no tutors.  No governess; no nanny.

The single biggest boost out of poverty is education.  Although the OPs are great, it needn't be an ivy league education, but a decent education starts early.  As a parent, you must impress upon your children the importance of education, if only as the light at the end of the tunnel of poverty.  For me, doing homework was mandatory, skipping school was unthinkable.  My mother read to me when I was a babe-in-arms and encouraged [forced?] me to read a lot as a student.

My 7th grade math teacher noticed that I was "slacking" - not doing the work. One day after class, he sat me down and explained the importance of education.  He said his job wasn't just to teach me these "facts", but to teach me critical thinking that could be used to solve problems, and to teach me "how to learn".  The former helps you in nearly any endeavor, and the latter keeps you improving through life.  Poor people are always worried about cash-flow, so he appealed to my 10 year old sense of frugality.  Public school was "free" (even if my parents' paid for it in taxes, whether I went there or not).  Advanced Placement (AP) classes gave you college credit, without paying for college tuition.  Take advantage of in-state tuition at state-run universities, rather than out-of-state or private universities.  [Although qualified low income students accepted to prestigious universities like MIT typically have a great deal of financial assistance.]  I buckled down, took several AP classes, won a Regents' scholarship to any NY state university or college, and became the first person in my family for generations to graduate from university.

The second trap of poverty is pregnancy.  The vast majority of my mother's side of the family were pregnant at 15, 16, or 17 years of age.  Nothing derails a high school or college education like having a child as a teen.  In fact, my father never finished University of Minnesota because of me and my sister.  Many teen moms get pregnant intentionally, because they want a baby or they want to secure a mate.  The only deterrent to that mindset is to provide an alternate view of the future that postpones those decisions for 5-10 years.

JEAN: It's great that you are thinking so hard about how to raise your little girl. She is lucky to have such a concerned parent!

Even though my parents both have graduate degrees in computer science, when we came to the US from Communist China in 1991 we had nothing. My father was a graduate student supporting the entire family on few hundred dollars a month. My mother waitressed in a restaurant. I got free lunch at school and my parents found all the free programs they could and enrolled me in them. (It also turns out many programs have financial aid if you are poor.) My mother figured out that I could get ballet lessons if she volunteered and that I could go to art classes for free. She also found after-school math and science programs for me to go to and we spent a lot of time at the library and the museums. (As I got older, my parents got good jobs and were able to provide more financially, but for much of my early education I grew up on these free resources.)

I think being poor matters less if you are involved as a parent and know where to look. I grew up with many children in immigrant families where the parents did not have much financially but knew how to give their children a good education. Many of these children are now very successful adults. So yes, it's possible to break out of poverty by looking for the right opportunities for your child.No professional links here, but some personal experiences.

My parents both went to college but never graduated, and ended up definitely on the lower-income side of the spectrum. For them, doing my homework wasn't enough, they wanted to talk to me about it, which led to way better comprehension when I just wanted to fill in the blanks as quickly as possible. I never wanted to ask for help, so I'd glide over things that were confusing, but they'd pick up on it right away if I had to explain it to them. My mom always bought a copy of the book we were reading in class and read it too, so she could ask me questions and talk about it. We did so many different programs at the library, going absolutely every two weeks. The summer reading clubs were great because we each got a free movie ticket. When I grew out of picture books for bedtime stories, it turned into a chapter of Harry Potter a night, and if I wanted to know what happened before my little brother, I had to read it myself. My mom would stand with me at the bus stop quizzing me over arithmetic for the "mad minute" tests I had. 

A lot of really talented kids end up letting their grades slip when they get bored or don't see what they're learning as anything more than a means to a grade. It always drove me nuts as a kid if my parents asked how school was going or how I was doing. But if they asked me about a topic, what I thought about it, and we looked for pictures and videos online together, it became a conversation about the rain forest, or native Americans, or genes, instead of "school work". 

Edit: For reference, I'm a female CS undergrad.
Were you interested in computers at an early age?[deleted]JEAN: I often think of programming languages as applied philosophy, so perhaps you would be interested in this area of research. Check out the proceedings of one of our top conferences, Principles of Programming Languages, and see you like any of these papers:
http://popl.mpi-sws.org/2015/

You may also want to read this book on Types and Programming Languages:
http://www.cis.upenn.edu/~bcpierce/tapl/
There is also Advanced Types and Programming Languages:
http://www.cis.upenn.edu/~bcpierce/attapl/

"Propositions as Types" may also be a fun paper for you:
http://homepages.inf.ed.ac.uk/wadler/papers/propositions-as-types/propositions-as-types.pdfNot OP, but take any entry-level crappy helpdesk support job that you can.  It'll be your foot in the door to getting more advanced jobs in the field.  It will also give you an idea of what you like/dislike about the field.  Once you've got a bit better idea of what you like doing, take some classes in those specific items.  Just my $0.02.  Also hoping that the more advanced computer scientists from MIT answer your question to benefit those wanting to switch career paths.

Source: I'm a System Administrator with an Associates in Liberal Arts.* What do you think of the future prospects of DNA computing?

* Is there any discussion of ethics in computer science at MIT? Do you think it's important?

* What's the best way men in computer science can improve the situation for women in computer science?

* Do you have any particular role models? Do you think role models are important or useful?

* Jean, can you tell me more about your verification work? (I've done some work on probabilistic model checking and am interested in verification generally)

Thanks! JEAN: Great questions.

I have had informal discussions about ethics in computer science. I think it's very important as a scientist to discuss both the ethics of how the research is conducted and of the impact of the research. Though we would like to think so, science is not objective: both the questions we choose to ask and the ways we go about pursuing answers depends on our specific world views. And especially since in computer science we are building things that have huge potential to transform society, we should think about how those changes might look.

A great first step for men in computer science to improve the situation for women and other minorities in computer science is to become aware of the issues. Is there inequality in your environment? How does it manifest? You can talk to women, read about topics like implicit bias, and read about allyship. It's also great if you can become sufficiently educated to identify inequities, especially small ones, as they come up--and speak up. Often the people being discriminated against are not in the best position to speak up for themselves so it's great if you can do it.

I wrote a Quora answer about my role models here:
http://www.quora.com/Who-are-some-examples-of-older-superstar-female-engineers-Post-40
Role models are incredibly important. We are much more likely to reach for something if we can see what the end goal might look like.

The biggest verification project I've done is Verve (http://en.wikipedia.org/wiki/Verve_%28operating_system%29), an operating system verified end-to-end for type safety and memory safety. We used first-order logic in Boogie (something like Pascal + preconditions, postconditions, and assertions) to build what we called the Nucleus, the part of an operating system that needs to be written in low-level C/assembly code. We then verified this with respect to an invariant that said the low-level code doesn't mess up the heap and the high-level code doesn't mess up the stacks. This allowed us to hook up the Nucleus, in addition with some verified garbage collectors, to C# code running on top and get end-to-end type safety and memory safety. The insights in this project were more about how to design a system for verification and leverage existing tools than about verification techniques.

I've also done some work in type-based verification for security with the Fine project. You can read my whole research statement here. :D
http://people.csail.mit.edu/jeanyang/application/research.pdfNo one is asking the important question: Vim or Emacs?OP plsWhy did you all decide to attain a PhD? I chose to do research at my job and working at the same time over a PhD. I'm not sure if I made the right choice.Neha: Good for you!  I wanted to do research in an environment where that was my primary goal.Do you really need to have string math skills to learn how to code,  what's the best approach for someone who is interested in learning but doesn't know where to/how to start?  You don't need strong math skills to be able to code. However, you might need strong math skills in order to be able to understand why certain algorithms work the way they do, or why certain things are possible/impossible.  

You *probably* won't become a truly great programmer without having a solid mathematical foundation, but if you're just starting to learn how to code I imagine you can take your time with that.As an aspiring student, who hopefully will be accepted to colleges in the upcoming months,  what steps did you (any of you I suppose)  take to establish a foundation in computer science and it's related studies? I've taken AP comp Sci and passed the exam,  but my teacher was very loose in his teachings so I feel very unprepared to learn more about a topic I wish to better understand. This mainly concerns me as I want to study in computer engineering and I feel I should take it upon myself to learn it on my own before I go anywhere. 

Oh and thanks for doing this ama as well! It's really neat to see how society and technology can evolve in tandem through stellar individuals :) Neha:  My foundation came through classes (majoring in Math and CS in undergrad) and working at Google.  I wouldn't worry too much about getting a head start -- the most amazing undergrad CS major I worked with didn't even start CS classes until late sophomore year, and before that had never coded.  I think all that stuff about "having to start young" is ridiculous.Wow that's such a relieving thing to hear! I've been really concerned that I would step into freshman classes and flounder just because I didn't know how to write full programs already. I think I'll check out some of those resources linked in the OP just to learn some stuff here and there out of personal interest. 

Thanks again! Neha:  Just a little warning:  Some people might try to make you feel that way.  I have noticed a lot of posturing at the beginning; just ignore it.  There are some people who prefer to act like they know more than they actually do.  @jeanqasaur: Love your blog - thanks - keep it going even once you've graduated!. I'm curious about your views on [Rust](http://www.rust-lang.org/)?

@ilar769: Views on current state of distributed DBs? Specifically RethinkDB, Oracle RAC, and other in that space... Also any chance of having nodes rejoining painlessly (regadless of which DB) in practice?

Neha:  There's a lot of FUD about distributed databases out there.  We need to do a better job of getting precise definitions and cutting through the marketing speak.  I think a lot of distributed databases out there right now give up consistency prematurely, but we're starting to see a shift away from that.

The nodes thing -- we're working on it!JEAN: Thanks! I haven't used Rust but I'm glad that people are working on making low-level systems programming easier and less error-prone.How fun is it to grade undergraduate programming homework?Neha:  Not.  At all.Why. Not automate?We do automate!  The problem is if they don't pass our tests, we have to figure out exactly why, and give them constructive feedback.

Automating grading proof-based problem sets would probably get you a decent research paper :)JEAN: I like it sometimes! Especially when there's a good test harness and it's in a fun language. It's fun to be able to influence how people think about programming. :)1.) Have you any particular career goal(s) you pursue in your field of work?

2.) Do you have any preferences in terms of programming languages, if so, please explain?Have you ever encountered harassments?I'm probably too late, but since I'm a high school senior trying to get into CS at MIT, I figured I should try anyway.


What programming experience did you have as a kid?  When did you start programming and where were you in programming skill before college?


Any advice on getting into MIT or CS in general?


I'm trying to make up my mind between majoring in Physics, Computer Science, or Mechanical Engineering.  Any advice on deciding?  What options would different majors leave me for grad school and getting a job?